#!/usr/bin/env stack
-- stack --install-ghc runghc


{-# LANGUAGE NoImplicitPrelude, RankNTypes #-}
import Prelude hiding (Bool(True, False), not, and, or, (||), (&&))


data Bool = True | False deriving (Eq, Show)

not' :: Bool -> Bool
not' True =  False
not' False = True

(&&) :: Bool -> Bool -> Bool
infixr 3 &&
True  && True  = True
True  && False = False
False && True  = False
False && False = False

(||) :: Bool -> Bool -> Bool
infixr 2 ||
True  || True  = True
True  || False = True
False || True  = True
False || False = False

cond :: Bool -> a -> a -> a
cond True ifTrue _ = ifTrue
cond False _ ifFalse = ifFalse

not :: Bool -> Bool
not b = cond b False True

and :: Bool -> Bool -> Bool
a `and` b = cond a (cond b True False) False

or :: Bool -> Bool -> Bool
a `or` b = cond a True (cond b True False)


type BoolL = forall a. a -> a -> a

trueL :: BoolL
trueL a b = a

falseL :: BoolL
falseL a b = b

condL :: BoolL -> a -> a -> a
condL p = p

notL :: BoolL -> BoolL
notL p = condL p falseL trueL

andL :: BoolL -> BoolL -> BoolL
a `andL` b = condL a (condL b trueL falseL) falseL

orL :: BoolL -> BoolL -> BoolL
a `orL` b = condL a trueL (condL b trueL falseL)


boolToL :: Bool -> BoolL
boolToL True = trueL
boolToL False = falseL

lToBool :: BoolL -> Bool
lToBool p = condL p True False


test expected =  print . (expected ==)
testL expected =  test expected . lToBool


main :: IO ()
main = do

    test False $ not True
    test True  $ not False

    test True  $ True  `and` True
    test False $ True  `and` False
    test False $ False `and` True
    test False $ False `and` False

    test True  $ True  `or` True
    test True  $ True  `or` False
    test True  $ False `or` True
    test False $ False `or` False

    testL False $ notL trueL
    testL True  $ notL falseL

    testL True  $ trueL  `andL` trueL
    testL False $ trueL  `andL` falseL
    testL False $ falseL `andL` trueL
    testL False $ falseL `andL` falseL

    testL True  $ trueL  `orL` trueL
    testL True  $ trueL  `orL` falseL
    testL True  $ falseL `orL` trueL
    testL False $ falseL `orL` falseL
