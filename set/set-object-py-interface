#!/usr/bin/env python


class Set:

    def __init__(self, contains_fn):
        self.contains_fn = contains_fn

    def contains(self, i):
        return self.contains_fn(i)

    def containsAll(self, *elems):
        return reduce(lambda b, i: b and self.contains(i), elems, True)

    def containsNo(self, *elems):
        return reduce(lambda b, i: b and not self.contains(i), elems, True)


empty = Set(lambda i: False)

def singleton(i):
    return Set(lambda j: True if i == j else False)

def multiple(*elems):
    return Set(lambda i: i in elems)

def insert(i, s):
    return Set(lambda j: True if i == j else s.contains(j))

def remove(i, s):
    return Set(lambda j: False if i == j else s.contains(j))

def union(s1, s2):
    return Set(lambda i: s1.contains(i) or s2.contains(i))

def intersection(s1, s2):
    return Set(lambda i: s1.contains(i) and s2.contains(i))


print(not empty.contains(1))

print(singleton(1).contains(1))

print(
    (lambda s: s.contains(1) and not s.contains(2))
    (singleton(1)))

print(not remove(1, singleton(1)).contains(1))

print(
    (lambda s: s.contains(1) and not s.contains(2))
    (remove(2, singleton(1))))

print(
    (lambda s: s.containsAll(1, 2, 3, 4))
    (union(multiple(1, 2), multiple(3, 4))))

print(
    (lambda s: s.contains(2) and s.containsNo(1, 3))
    (intersection(multiple(1, 2), multiple(2, 3))))
