#!/usr/bin/env python


class Set:

    def contains(self, i):
        raise NotImplementedError

    def containsAll(self, *elems):
        return reduce(lambda b, i: b and self.contains(i), elems, True)

    def containsNo(self, *elems):
        return reduce(lambda b, i: b and not self.contains(i), elems, True)


class Empty(Set):

    def contains(self, i):
        return False


class Singleton(Set):

    def __init__(self, elem):
        self.elem = elem

    def contains(self, elem):
        return self.elem == elem


class Multiple(Set):

    def __init__(self, *elems):
        self.elems = elems

    def contains(self, elem):
        return elem in self.elems


class Remove(Set):

    def __init__(self, elem, set):
        self.elem = elem
        self.set = set

    def contains(self, elem):
        if self.elem == elem:
            return False
        else:
            return self.set.contains(elem)


class Insert(Set):

    def __init__(self, elem, set):
        self.elem = elem
        self.set = set

    def contains(self, elem):
        if self.elem == elem:
            return True
        else:
            return self.set.contains(elem)


class Union(Set):

    def __init__(self, set1, set2):
        self.set1 = set1
        self.set2 = set2

    def contains(self, elem):
        return self.set1.contains(elem) or self.set2.contains(elem)


class Intersection(Set):

    def __init__(self, set1, set2):
        self.set1 = set1
        self.set2 = set2

    def contains(self, elem):
        return self.set1.contains(elem) and self.set2.contains(elem)


print(not Empty().contains(1))

print(Singleton(1).contains(1))

print(
    (lambda s: s.contains(1) and not s.contains(2))
    (Singleton(1)))

print(not Remove(1, Singleton(1)).contains(1))

print(
    (lambda s: s.contains(1) and not s.contains(2))
    (Remove(2, Singleton(1))))

print(
    (lambda s: s.containsAll(1, 2, 3, 4))
    (Union(Multiple(1, 2), Multiple(3, 4))))

print(
    (lambda s: s.contains(2) and s.containsNo(1, 3))
    (Intersection(Multiple(1, 2), Multiple(2, 3))))
