#!/bin/sh
':' //; exec "$(command -v nodejs || command -v node)" "$0" "$@"


function contains(i, s) { return s(i) }

empty = function(i) { return false }

function singleton(i) {
    return function (j) {
        if (i === j) { return true } else { return false }
    }
}

function multiple(elems) {
    return function (i) {
        return elems.indexOf(i) >= 0
    }
}

function insert(i, s) {
    return function(j) {
        if (i === j) { return true } else { return contains(j, s) }
    }
}

function remove(i, s) {
    return function(j) {
        if (i === j) { return false } else { return contains(j, s) }
    }
}

function union(s1, s2) {
    return function(i) {
        return contains(i, s1) || contains(i, s2)
    }
}

function intersection(s1, s2) {
    return function(i) {
        return contains(i, s1) && contains(i, s2)
    }
}

function containsAll(elems, s) {
    return elems.reduce(function (b, i) { return b && contains(i, s) }, true)
}

function containsNo(elems, s) {
    return elems.reduce(function (b, i) { return b && ! contains(i, s) }, true)
}


console.log(!contains(1, empty))

console.log(contains(1, singleton(1)))

console.log(
    function (s) { return contains(1, s) && !contains(2, s) }
    (singleton(1)))

console.log(!contains(1, remove(1, singleton(1))))

console.log( 
    function (s) { return contains(1, s) && !contains(2, s) }
    (remove(2, singleton(1))))

console.log(
    function (s) { return containsAll([1, 2, 3, 4], s) }
    (union(multiple([1, 2]), multiple([3, 4]))))

console.log(
    function (s) { return contains(2, s) && containsNo([1, 3], s) }
    (intersection(multiple([1, 2]), multiple([2, 3]))))
