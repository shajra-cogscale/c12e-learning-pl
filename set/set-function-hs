#!/usr/bin/env stack
-- stack --install-ghc runghc


import Data.Foldable (find)
import Data.Maybe (isJust)


type Set = Int -> Bool


contains :: Int -> Set -> Bool
contains i s = s i

empty :: Set
empty _ = False

singleton :: Int -> Set
singleton i j = if i == j then True else False

multiple :: [Int] -> Set
multiple is i = isJust $ find (i ==) is

insert :: Int -> Set -> Set
insert i s j = if i == j then True else contains j s

remove :: Int -> Set -> Set
remove i s j = if i == j then False else contains j s

union :: Set -> Set -> Set
union s1 s2 i = (contains i s1) || (contains i s2)

intersection :: Set -> Set -> Set
intersection s1 s2 i = (contains i s1) && (contains i s2)

containsAll :: [Int] -> Set -> Bool
containsAll is s = foldr ((&&) . flip contains s) True is

containsNo :: [Int] -> Set -> Bool
containsNo is s = foldr ((&&) . not . flip contains s) True is


main :: IO ()
main = do

    print . not $ contains 1 empty

    print . contains 1 $ singleton 1

    print
        . (\s -> contains 1 s && (not . contains 2) s)
        $ singleton 1

    print . not . contains 1 . remove 1 $ singleton 1

    print
        . (\s -> contains 1 s && (not . contains 2) s)
        . remove 2 $ singleton 1

    print
        . containsAll [1, 2, 3, 4]
        $ union (multiple [1, 2]) (multiple [3, 4])

    print
        . (\s -> contains 2 s && containsNo [1, 3] s)
        $ intersection (multiple [1, 2]) (multiple [2, 3])
