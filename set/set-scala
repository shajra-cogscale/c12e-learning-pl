#!/usr/bin/env scala


type Set = Int => Boolean


def contains(i: Int, s: Set): Boolean =
  s(i)

val empty: Set = 
  _ => false

def singleton(i: Int): Set =
  j => if (i == j) true else false

def insert(i: Int, s: Set): Set =
  j => if (i == j) true else contains(j, s)

def remove(i: Int, s: Set): Set =
  j => if (i == j) false else contains(j, s)

def union(s1: Set, s2: Set): Set =
  i => contains(i, s1) || contains(i, s2)

def intersection(s1: Set, s2: Set): Set =
  i => contains(i, s1) && contains(i, s2)

def insertAll(is: List[Int]): Set =
  is.foldRight(empty)(insert)

def containsAll(is: List[Int], s: Set): Boolean =
  is.foldRight(true) { (i, b) => b && contains(i, s) }

def containsNo(is: List[Int], s: Set): Boolean =
  is.foldRight(true) { (i, b) => b && !contains(i, s) }


println(!contains(1, empty))

println(contains(1, singleton(1)))

println(
  { s: Set => contains(1, s) && !contains(2, s) } apply singleton(1))

println(!contains(1, remove(1, singleton(1))))

println(
  { s: Set => contains(1, s) && !contains(2, s) }
    .apply(remove(2, singleton(1))))

println(
  { s: Set => containsAll(List(1, 2, 3, 4), s) }
    .apply(union(insertAll(List(1, 2)), insertAll(List(3, 4)))))

println(
  { s: Set => contains(2, s) && containsNo(List(1, 3), s) }
    .apply(intersection(insertAll(List(1, 2)), insertAll(List(2, 3)))))

